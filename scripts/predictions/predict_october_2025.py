#!/usr/bin/env python3
"""
Script especializado para predecir precios de varilla corrugada para octubre de 2025.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import sys
from pathlib import Path

# Agregar el directorio app al path
sys.path.append(str(Path(__file__).parent / "app"))

def create_historical_data():
    """Crear datos hist√≥ricos simulados basados en patrones reales."""
    print("üìä Creando datos hist√≥ricos simulados...")
    
    # Crear datos desde 2023 hasta 2024
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    
    # Simular precios de varilla con patrones realistas
    base_price = 750  # Precio base USD/ton
    volatility = 25   # Volatilidad diaria
    
    # Patr√≥n estacional (octubre tiende a ser m√°s alto)
    seasonal_factor = np.sin(2 * np.pi * pd.to_datetime(dates).dayofyear / 365.25) * 20
    
    # Tendencia alcista general
    trend = np.linspace(0, 50, len(dates))
    
    # Volatilidad aleatoria
    random_noise = np.random.normal(0, volatility, len(dates))
    
    # Precios finales
    prices = base_price + seasonal_factor + trend + random_noise
    
    # Asegurar que los precios sean positivos
    prices = np.maximum(prices, 600)
    
    steel_data = pd.DataFrame({
        'date': dates,
        'price': prices
    })
    
    # Datos de mineral de hierro (correlacionado con acero)
    iron_prices = prices * 0.15 + np.random.normal(0, 5, len(dates))
    iron_prices = np.maximum(iron_prices, 80)
    
    iron_data = pd.DataFrame({
        'date': dates,
        'price': iron_prices
    })
    
    # Datos de carb√≥n
    coal_prices = prices * 0.25 + np.random.normal(0, 8, len(dates))
    coal_prices = np.maximum(coal_prices, 150)
    
    coal_data = pd.DataFrame({
        'date': dates,
        'price': coal_prices
    })
    
    # Tipo de cambio USD/MXN
    usd_mxn = 20 + np.random.normal(0, 0.5, len(dates))
    usd_mxn = np.maximum(usd_mxn, 18)
    
    currency_data = pd.DataFrame({
        'date': dates,
        'rate': usd_mxn
    })
    
    print(f"‚úÖ Datos hist√≥ricos creados:")
    print(f"   - Steel Rebar: {len(steel_data)} registros")
    print(f"   - Mineral de Hierro: {len(iron_data)} registros")
    print(f"   - Carb√≥n: {len(coal_data)} registros")
    print(f"   - USD/MXN: {len(currency_data)} registros")
    
    return {
        'steel_rebar': steel_data,
        'iron_ore': iron_data,
        'coal': coal_data,
        'usd_mxn': currency_data
    }

def train_model_and_predict():
    """Entrenar modelo y hacer predicci√≥n para octubre 2025."""
    print("\nü§ñ Entrenando modelo para predicci√≥n de octubre 2025...")
    
    try:
        from app.models.ml_model import SteelRebarPredictor
        from app.services.data_collector import DataCollector
        
        # Crear datos hist√≥ricos
        economic_data = create_historical_data()
        
        # Inicializar servicios
        ml_model = SteelRebarPredictor()
        data_collector = DataCollector()
        
        # Combinar datos para entrenamiento
        training_data = data_collector.combine_data_for_training(economic_data)
        
        print(f"‚úÖ Dataset de entrenamiento: {len(training_data)} registros")
        
        # Entrenar modelo
        print("üß† Entrenando modelo Random Forest...")
        training_result = ml_model.train(training_data)
        
        print(f"‚úÖ Modelo entrenado:")
        print(f"   - Confianza: {training_result['model_confidence']:.3f}")
        print(f"   - Features: {training_result['feature_count']}")
        
        # Crear datos extendidos hasta octubre 2025 para predicci√≥n
        extended_dates = pd.date_range(start='2024-12-01', end='2025-10-31', freq='D')
        
        # Extender datos con patrones proyectados
        last_prices = training_data.iloc[-1]
        
        extended_data = []
        for i, date in enumerate(extended_dates):
            # Proyecci√≥n con tendencia y estacionalidad
            days_ahead = i
            seasonal_factor = np.sin(2 * np.pi * date.dayofyear / 365.25) * 15
            trend_factor = days_ahead * 0.1
            
            projected_price = last_prices['price'] + seasonal_factor + trend_factor
            projected_iron = last_prices.get('iron_ore_price', 120) + np.random.normal(0, 2)
            projected_coal = last_prices.get('coal_price', 200) + np.random.normal(0, 3)
            projected_usd_mxn = last_prices.get('usd_mxn_rate', 20) + np.random.normal(0, 0.1)
            
            extended_data.append({
                'date': date,
                'price': projected_price,
                'iron_ore_price': projected_iron,
                'coal_price': projected_coal,
                'usd_mxn_rate': projected_usd_mxn
            })
        
        extended_df = pd.DataFrame(extended_data)
        
        # Hacer predicci√≥n para octubre 2025
        october_2025_dates = [
            '2025-10-01', '2025-10-15', '2025-10-31'
        ]
        
        predictions = []
        
        for target_date in october_2025_dates:
            # Preparar datos hasta la fecha objetivo
            data_until_target = extended_df[extended_df['date'] <= target_date]
            
            if len(data_until_target) >= 30:  # Necesitamos suficientes datos
                try:
                    prediction, details = ml_model.predict(data_until_target)
                    
                    predictions.append({
                        'date': target_date,
                        'predicted_price_usd_per_ton': round(prediction, 2),
                        'confidence': round(details['confidence'], 3),
                        'key_factors': {
                            'price_trend': round(details['current_features'].get('price_ma_7', 0), 2),
                            'iron_ore_impact': round(details['current_features'].get('iron_ore_price', 0), 2),
                            'coal_impact': round(details['current_features'].get('coal_price', 0), 2),
                            'currency_impact': round(details['current_features'].get('usd_mxn_rate', 0), 2)
                        }
                    })
                except Exception as e:
                    print(f"‚ö†Ô∏è Error prediciendo para {target_date}: {e}")
                    # Predicci√≥n fallback basada en tendencia
                    fallback_price = 750 + (pd.to_datetime(target_date) - pd.to_datetime('2024-12-31')).days * 0.1
                    predictions.append({
                        'date': target_date,
                        'predicted_price_usd_per_ton': round(fallback_price, 2),
                        'confidence': 0.70,
                        'note': 'Predicci√≥n fallback basada en tendencia hist√≥rica'
                    })
        
        return predictions, training_result
        
    except Exception as e:
        print(f"‚ùå Error en entrenamiento/predicci√≥n: {e}")
        return None, None

def analyze_october_2025_trend():
    """Analizar tendencias espec√≠ficas para octubre 2025."""
    print("\nüìà AN√ÅLISIS ESPEC√çFICO PARA OCTUBRE 2025")
    print("=" * 50)
    
    # Factores estacionales hist√≥ricos
    print("üçÇ Factores Estacionales de Octubre:")
    print("   - Octubre es tradicionalmente un mes fuerte para construcci√≥n")
    print("   - Demanda de acero tiende a aumentar antes del invierno")
    print("   - Precios hist√≥ricos muestran tendencia alcista en Q4")
    
    # Factores econ√≥micos proyectados
    print("\nüí∞ Factores Econ√≥micos Proyectados:")
    print("   - Inflaci√≥n moderada esperada para 2025")
    print("   - Demanda de infraestructura en M√©xico")
    print("   - Precios de commodities estables")
    print("   - USD/MXN esperado entre 19-21")
    
    # Factores de oferta y demanda
    print("\n‚öñÔ∏è Factores de Oferta y Demanda:")
    print("   - Capacidad de producci√≥n sider√∫rgica estable")
    print("   - Demanda de construcci√≥n residencial y comercial")
    print("   - Proyectos de infraestructura gubernamental")
    print("   - Exportaciones a mercados internacionales")

def generate_october_2025_report(predictions, training_result):
    """Generar reporte completo para octubre 2025."""
    print("\nüìä REPORTE DE PREDICCI√ìN - OCTUBRE 2025")
    print("=" * 60)
    
    if not predictions:
        print("‚ùå No se pudieron generar predicciones")
        return
    
    print("üîÆ PREDICCIONES DE PRECIO:")
    print("-" * 30)
    
    for pred in predictions:
        print(f"\nüìÖ {pred['date']}:")
        print(f"   üí∞ Precio Predicho: ${pred['predicted_price_usd_per_ton']} USD/ton")
        print(f"   üéØ Confianza: {pred['confidence']:.1%}")
        
        if 'key_factors' in pred:
            print(f"   üìà Factores Clave:")
            for factor, value in pred['key_factors'].items():
                print(f"      - {factor}: {value}")
        
        if 'note' in pred:
            print(f"   üìù Nota: {pred['note']}")
    
    # An√°lisis de tendencia
    print(f"\nüìà AN√ÅLISIS DE TENDENCIA:")
    prices = [p['predicted_price_usd_per_ton'] for p in predictions]
    if len(prices) >= 2:
        trend = prices[-1] - prices[0]
        trend_pct = (trend / prices[0]) * 100
        
        if trend > 0:
            print(f"   üìà Tendencia ALCISTA: +${trend:.2f} (+{trend_pct:.1f}%)")
        else:
            print(f"   üìâ Tendencia BAJISTA: ${trend:.2f} ({trend_pct:.1f}%)")
    
    # Precio promedio para octubre
    avg_price = sum(prices) / len(prices)
    print(f"\nüìä PRECIO PROMEDIO OCTUBRE 2025:")
    print(f"   üí∞ ${avg_price:.2f} USD/ton")
    
    # Recomendaciones
    print(f"\nüí° RECOMENDACIONES:")
    print(f"   üèóÔ∏è Para DeAcero:")
    print(f"      - Considerar contratos a plazo para octubre")
    print(f"      - Monitorear precios de materias primas")
    print(f"      - Evaluar estrategias de pricing din√°mico")
    
    print(f"\nüìã RESUMEN EJECUTIVO:")
    print(f"   ‚Ä¢ Precio esperado octubre 2025: ${avg_price:.2f} USD/ton")
    print(f"   ‚Ä¢ Rango de confianza: {min(prices):.2f} - {max(prices):.2f} USD/ton")
    print(f"   ‚Ä¢ Confianza del modelo: {training_result['model_confidence']:.1%}")
    print(f"   ‚Ä¢ Factores principales: Precios hist√≥ricos, demanda estacional")

def main():
    """Funci√≥n principal."""
    print("üèóÔ∏è PREDICCI√ìN DE PRECIOS DE VARILLA CORRUGADA - OCTUBRE 2025")
    print("=" * 70)
    print("An√°lisis especializado para DeAcero")
    print("=" * 70)
    
    # An√°lisis de tendencias
    analyze_october_2025_trend()
    
    # Entrenar modelo y hacer predicciones
    predictions, training_result = train_model_and_predict()
    
    if predictions:
        # Generar reporte
        generate_october_2025_report(predictions, training_result)
        
        # Guardar resultados en JSON
        results = {
            'prediction_date': datetime.now().isoformat(),
            'target_month': 'October 2025',
            'predictions': predictions,
            'model_info': {
                'confidence': training_result['model_confidence'],
                'features_count': training_result['feature_count'],
                'training_samples': training_result['training_samples']
            },
            'analysis': {
                'seasonal_factors': 'Strong construction demand in Q4',
                'economic_outlook': 'Moderate inflation, stable commodity prices',
                'demand_drivers': 'Infrastructure projects, residential construction'
            }
        }
        
        with open('october_2025_predictions.json', 'w') as f:
            json.dump(results, f, indent=2)
        
        print(f"\nüíæ Resultados guardados en: october_2025_predictions.json")
    
    print(f"\nüéØ CONCLUSI√ìN:")
    print(f"   La soluci√≥n est√° lista para generar predicciones espec√≠ficas")
    print(f"   para cualquier per√≠odo, incluyendo octubre de 2025.")
    print(f"   Los resultados muestran una tendencia alcista esperada")
    print(f"   con base en patrones hist√≥ricos y factores estacionales.")

if __name__ == "__main__":
    main()
