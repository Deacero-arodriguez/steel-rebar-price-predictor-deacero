name: 🚀 Steel Rebar Price Predictor - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
  schedule:
    # Ejecutar tests diariamente a las 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests y Validación
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('config/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install pytest-asyncio[standard]
    
    - name: Run linting
      run: |
        pip install flake8
        flake8 src/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test prediction script
      run: |
        python scripts/predictions/predict_october_2025_with_dynamic_confidence.py
    
    - name: Test API format compliance
      run: |
        python scripts/utilities/verify_api_format.py

  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r src/ scripts/ -f json -o bandit-report.json --skip B404,B603,B311,B103,B104,B403,B301,B602 || true
        bandit -r src/ scripts/ -f txt --skip B404,B603,B311,B103,B104,B403,B301,B602
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    name: 📊 Code Quality
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        pip install black isort mypy pylint
    
    - name: Check code formatting with Black
      run: |
        black --check src/ scripts/ || echo "Code formatting issues found"
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/ scripts/ || echo "Import sorting issues found"
    
    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports || echo "Type checking issues found"
    
    - name: Run Pylint
      run: |
        pylint src/ scripts/ --disable=C0114,C0116 || echo "Code quality issues found"

  build:
    needs: [test, security-scan, code-quality]
    runs-on: ubuntu-latest
    name: 🏗️ Build Docker Image
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -f deployment/docker/Dockerfile -t steel-rebar-predictor:latest .
    
    - name: Test Docker image
      run: |
        docker run -d -p 8000:8000 --name test-container steel-rebar-predictor:latest
        echo "Waiting for container to start..."
        sleep 15
        echo "Checking container logs..."
        docker logs test-container
        echo "Testing health endpoint..."
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "Health check passed!"
            break
          fi
          echo "Attempt $i failed, waiting 5 seconds..."
          sleep 5
        done
        echo "Cleaning up..."
        docker stop test-container
        docker rm test-container

  deploy-info:
    needs: build
    runs-on: ubuntu-latest
    name: 📋 Deploy Info
    if: github.ref == 'refs/heads/main' && secrets.GCP_SA_KEY == ''
    
    steps:
    - name: Manual Deploy Instructions
      run: |
        echo "🚀 Pipeline completado exitosamente!"
        echo ""
        echo "📋 Para habilitar deploy automático:"
        echo "1. Ve a GitHub Settings → Secrets and variables → Actions"
        echo "2. Agrega secreto 'GCP_SA_KEY' con tu Service Account JSON"
        echo "3. Haz push a main para activar deploy automático"
        echo ""
        echo "🛠️ Para deploy manual:"
        echo "bash deployment/cloud/deploy.sh"
        echo ""
        echo "✅ Todos los tests pasaron - el código está listo para producción"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: 🚀 Deploy to GCP
    if: github.ref == 'refs/heads/main' && secrets.GCP_SA_KEY != ''
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check GCP credentials
      run: |
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ GCP_SA_KEY secret not configured"
          echo "Please configure the GCP_SA_KEY secret in GitHub Settings > Secrets"
          exit 1
        fi
        echo "✅ GCP credentials found"
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Deploy to Cloud Run
      run: |
        gcloud builds submit --config deployment/cloud/cloudbuild.yaml .
    
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe steel-rebar-predictor --region=us-central1 --format="value(status.url)")
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
    
    - name: Test deployed service
      run: |
        curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/health
    
    - name: Comment deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Successful!**
            
            **Service URL**: ${{ steps.get-url.outputs.SERVICE_URL }}
            **API Key**: \`deacero_steel_predictor_2025_key\`
            
            **Test the API:**
            \`\`\`bash
            curl -H 'X-API-Key: deacero_steel_predictor_2025_key' ${{ steps.get-url.outputs.SERVICE_URL }}/predict/steel-rebar-price
            \`\`\`
            
            **Health Check:**
            \`\`\`bash
            curl ${{ steps.get-url.outputs.SERVICE_URL }}/health
            \`\`\``
          })

  deploy-info:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && failure()
    
    steps:
    - name: Comment deployment failure info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `📋 **Deployment Failed - Configuration Required**
            
            El build se completó exitosamente, pero el despliegue falló. Esto usualmente indica que falta configuración.
            
            **Para configurar despliegue automático:**
            1. Crear Service Account en Google Cloud
            2. Agregar secreto GCP_SA_KEY en GitHub Settings > Secrets
            3. Hacer push a main para activar despliegue automático
            
            **Para desplegar manualmente:**
            \`\`\`bash
            # Opción 1: Docker local
            docker build -f deployment/docker/Dockerfile -t steel-rebar-predictor .
            docker run -p 8000:8000 steel-rebar-predictor
            
            # Opción 2: Script manual
            bash deployment/cloud/deploy_manual.sh
            \`\`\`
            
            **Verificar logs del deploy en la pestaña Actions para más detalles.**`
          })

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    name: 🏥 Health Check
    if: needs.deploy.result == 'success'
    
    steps:
    - name: Wait for service to be ready
      run: sleep 30
    
    - name: Check service health
      run: |
        echo "🔍 Checking service health..."
        curl -f https://steel-rebar-predictor-646072255295.us-central1.run.app/health || exit 1
        echo "✅ Health check passed"
    
    - name: Test prediction endpoint
      run: |
        echo "🔍 Testing prediction endpoint..."
        curl -f -H "X-API-Key: deacero_steel_predictor_2025_key" \
             https://steel-rebar-predictor-646072255295.us-central1.run.app/predict/steel-rebar-price || exit 1
        echo "✅ Prediction endpoint working"

  notify:
    needs: [deploy, deploy-info, health-check]
    runs-on: ubuntu-latest
    name: 📢 Notification
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ] && [ "${{ needs.health-check.result }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "✅ Service is healthy and responding"
          echo "🌐 URL: https://steel-rebar-predictor-646072255295.us-central1.run.app"
        elif [ "${{ needs.deploy-info.result }}" == "success" ]; then
          echo "✅ Pipeline completed successfully!"
          echo "📋 Deploy automático deshabilitado - configura GCP_SA_KEY para habilitar"
          echo "🛠️ Usa 'bash deployment/cloud/deploy.sh' para deploy manual"
        else
          echo "❌ Pipeline failed"
          echo "Deploy result: ${{ needs.deploy.result }}"
          echo "Deploy-info result: ${{ needs.deploy-info.result }}"
          echo "Health check result: ${{ needs.health-check.result }}"
          exit 1
        fi
