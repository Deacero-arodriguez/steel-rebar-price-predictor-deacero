name: CI/CD Pipeline - Steel Rebar Price Predictor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('config/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
    
    - name: Run linting
      run: |
        pip install flake8
        flake8 src/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test prediction script
      run: |
        python scripts/predictions/predict_october_2025_with_dynamic_confidence.py
    
    - name: Test API format compliance
      run: |
        python scripts/utilities/verify_api_format.py

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -f deployment/docker/Dockerfile -t steel-rebar-predictor:latest .
    
    - name: Test Docker image
      run: |
        docker run -d -p 8000:8000 --name test-container steel-rebar-predictor:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
        docker rm test-container

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.GCP_SA_KEY != ''
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Deploy to Cloud Run
      run: |
        gcloud builds submit --config deployment/cloud/cloudbuild.yaml .
    
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe steel-rebar-predictor --region=us-central1 --format="value(status.url)")
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
    
    - name: Test deployed service
      run: |
        curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/health
    
    - name: Comment deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Successful!**
            
            **Service URL**: ${{ steps.get-url.outputs.SERVICE_URL }}
            **API Key**: \`deacero_steel_predictor_2025_key\`
            
            **Test the API:**
            \`\`\`bash
            curl -H 'X-API-Key: deacero_steel_predictor_2025_key' ${{ steps.get-url.outputs.SERVICE_URL }}/predict/steel-rebar-price
            \`\`\`
            
            **Health Check:**
            \`\`\`bash
            curl ${{ steps.get-url.outputs.SERVICE_URL }}/health
            \`\`\``
          })

  deploy-info:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.GCP_SA_KEY == ''
    
    steps:
    - name: Comment deployment info
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `📋 **Build Successful - Manual Deployment Required**
            
            El build se completó exitosamente, pero el despliegue automático requiere configuración de Google Cloud.
            
            **Para desplegar manualmente:**
            \`\`\`bash
            # Opción 1: Docker local
            docker build -f deployment/docker/Dockerfile -t steel-rebar-predictor .
            docker run -p 8000:8000 steel-rebar-predictor
            
            # Opción 2: Script manual
            bash deployment/cloud/deploy_manual.sh
            \`\`\`
            
            **Para configurar despliegue automático:**
            1. Crear Service Account en Google Cloud
            2. Agregar secreto GCP_SA_KEY en GitHub Settings > Secrets
            3. Hacer push a main para activar despliegue automático`
          })
